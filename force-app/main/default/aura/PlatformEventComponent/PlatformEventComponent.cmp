<aura:component implements="flexipage:availableForAllPageTypes" access="global" >
    
    <lightning:empApi aura:id="empApiNew" />
    
    <aura:handler name="init" value="{!this}" action="{!c.onInit}"/>

    <!-- Holds the streaming event subscription -->
    <aura:attribute name="subscription" type="Map" />
    <aura:attribute name="eventMessage" type="String" />
    
    <aura:attribute name="channelName" type="String" default="/event/BatchApexErrorEvent" required="true" />
    
    <!-- attributes -->
    <aura:attribute name="data" type="Object"/>
    <aura:attribute name="columns" type="List"/>

    <lightning:card title="Standard Platform Event" iconName="standard:event">
        <div class="slds-var-p-around_large">
            {!v.eventMessage}
            <!-- Form for subscribing/unsubscribing to/from events -->
            <lightning:input aura:id="channel" label="channel" name="channel" type="text" 
                             value="{!v.channelName}"/>
            <br/>
            <lightning:button label="Subscribe" onclick="{! c.subscribe }" variant="success"
                              disabled="{!!empty(v.subscription)}" />
            &nbsp;&nbsp;
            <lightning:button label="Unsubscribe" onclick="{! c.unsubscribe }" disabled="{!empty(v.subscription)}"/>
        </div>
        <div>
        	<!-- the container element determine the height of the datatable -->
            <aura:if isTrue="{!v.channelName == '/event/BatchApexErrorEvent'}">
                <div class="slds-var-p-around_large">
                    <lightning:datatable
                                         keyField="id"
                                         data="{! v.data }"
                                         columns="{! v.columns }"
                                         hideCheckboxColumn="true"/>
                </div> 
            </aura:if>
        </div>
    </lightning:card>
</aura:component>

<!--Implementing the above logic using LWC-->

<!--<template>
    <lightning-card title="Streaming API Example" icon-name="custom:custom14">
        <div class="slds-m-around_medium">
            {messageData} <br/>
            {responeData}
        </div>
        <div class="slds-m-around_medium">
            <p>Use the buttons below to subscribe and unsubscribe to a streaming channel!</p>
            <lightning-input label="Channel Name" value={channelName}
                onchange={handleChannelName}></lightning-input>
            <lightning-button variant="success" label="Subscribe" title="Subscribe"
                onclick={handleSubscribe} disabled={isSubscribeDisabled}
                class="slds-m-left_x-small"></lightning-button>
            <lightning-button variant="destructive" label="Unsubscribe" title="Unsubscribe"
                onclick={handleUnsubscribe} disabled={isUnsubscribeDisabled}
                class="slds-m-left_x-small"></lightning-button>
        </div>
    </lightning-card>
</template>


import { LightningElement, track } from 'lwc';
import { subscribe, unsubscribe, onError } from 'lightning/empApi';
export default class Sfdc_events extends LightningElement {
    channelName = '/event/Test_Event__e';
    isSubscribeDisabled = false;
    isUnsubscribeDisabled = !this.isSubscribeDisabled;

    subscription = {};

    @track messageData;
    @track responeData;

    handleChannelName(event) {
        this.channelName = event.target.value;
    }

    connectedCallback() {            
        this.registerErrorListener();      
    }

    handleSubscribe() {

        const messageCallback = function(response) {
            console.log('New message received: ', JSON.stringify(response));
            this.responeData = JSON.stringify(response);
        };
        subscribe(this.channelName, -2, messageCallback).then(response => {
            console.log('Subscription request sent to: ', JSON.stringify(response.channel));
            this.messageData = 'Subscription request sent to: '+ JSON.stringify(response.channel);
            this.subscription = response;
            this.toggleSubscribeButton(true);
        });
    }
    handleUnsubscribe() {
        this.toggleSubscribeButton(false);
        unsubscribe(this.subscription, response => {
            console.log('unsubscribe() response: ', JSON.stringify(response));
        });
    }

    toggleSubscribeButton(enableSubscribe) {
        this.isSubscribeDisabled = enableSubscribe;
        this.isUnsubscribeDisabled = !enableSubscribe;
    }

    registerErrorListener() {
        onError(error => {
            console.log('Received error from server: ', JSON.stringify(error));
        });
    }
}


<isExposed>true</isExposed>
    <masterLabel>Near Real Time Dmeo</masterLabel>
    <targets>
        <target>lightning__RecordPage</target>
        <target>lightning__AppPage</target>
        <target>lightning__HomePage</target>
        <target>lightning__Tab</target>
        <target>lightning__Inbox</target>
        <target>lightning__UtilityBar</target>
        <target>lightning__FlowScreen</target>
        <target>lightningSnapin__ChatMessage</target>
        <target>lightningSnapin__Minimized</target>
        <target>lightningSnapin__PreChat</target>
        <target>lightningSnapin__ChatHeader</target>
        <target>lightningCommunity__Page</target>
        <target>lightningCommunity__Default</target>
    </targets>
-->